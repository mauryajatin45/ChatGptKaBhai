<%- layout('layouts/boilerplate') %>

    <head>
        <link rel="stylesheet" href="/css/home.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
        <title>BhaiGPT</title>
    </head>

    <body>
        <div class="app-container">
            <!-- Sidebar Navigation -->
            <div class="sidebar">
                <div class="sidebar-header">
                    <div class="logo-container">
                        <img src="/images/Logo.png" alt="BhaiChat Logo" class="logo-img">
                        <span class="logo-text">BhaiGPT</span>
                    </div>
                    <button class="new-chat-btn" id="newChatBtn">
                        <i class="fas fa-plus"></i> New Chat
                    </button>
                </div>

                <div class="chat-history">
                    <div class="history-header">
                        <span>Recent Chats</span>
                        <i class="fas fa-chevron-down" id="historyToggle"></i>
                    </div>
                    <ul class="history-list" id="historyList">
                        <% chats.forEach(chat => { %>
                            <li class="history-item" data-chat-id="<%= chat._id %>">
                                <i class="fas fa-comment"></i>
                                <span><%= chat.title %></span>
                                <button class="delete-chat" onclick="deleteChat('<%= chat._id %>')">&times;</button>
                            </li>
                        <% }); %>
                    </ul>
                </div>

                <div class="sidebar-footer">
                    <div class="user-profile" id="userProfile">
                        <div class="avatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <div class="user-info">
                            <span class="username"><%-user.username%></span>
                            <span class="user-email"><%-user.email%></span>
                        </div>
                        <i class="fas fa-ellipsis-vertical"></i>
                    </div>
                </div>
            </div>

            <!-- Main Chat Area -->
            <div class="main-content">
                <div class="model-selector">
                    <select id="modelSelect">
                        <option value="llama-3.1">llama-3.1</option>
                        <option value="llama-3.3">llama-3.3</option>
                    </select>
                </div>
                <div class="chat-container">
                    <div class="welcome-screen" id="welcomeScreen">
                        <h1>Welcome to BhaiGPT</h1>
                        <div class="capabilities-container">
                            <div class="capability-card">
                                <i class="fas fa-lightbulb"></i>
                                <h3>Examples</h3>
                                <ul>
                                    <li class="example-query">"Explain quantum computing"</li>
                                    <li class="example-query">"Write a poem about AI"</li>
                                    <li class="example-query">"How to make HTTP requests?"</li>
                                </ul>
                            </div>
                            <div class="capability-card">
                                <i class="fas fa-bolt"></i>
                                <h3>Capabilities</h3>
                                <ul>
                                    <li>Text generation and analysis</li>
                                    <li>Image creation from text</li>
                                    <li>Voice interaction</li>
                                </ul>
                            </div>
                            <div class="capability-card">
                                <i class="fas fa-exclamation-triangle"></i>
                                <h3>Limitations</h3>
                                <ul>
                                    <li>May occasionally generate incorrect info</li>
                                    <li>Limited knowledge after 2023</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="chat-messages" id="chatMessages">
                        <!-- Chat messages will appear here -->
                    </div>
                </div>

                <div class="input-container">
                    <div class="mode-selector">
                        <button class="mode-btn active" data-mode="text"><i class="fas fa-comment"></i> Text</button>
                        <button class="mode-btn" data-mode="image"><i class="fas fa-image"></i> Image</button>
                        <button class="mode-btn" data-mode="video"><i class="fas fa-video"></i> Video</button>
                        <button class="mode-btn" data-mode="voice"><i class="fas fa-microphone"></i> Voice</button>
                    </div>
                    <div class="message-input-wrapper">
                        <textarea id="messageInput" placeholder="Message BhaiGPT..." rows="1"></textarea>
                        <button class="send-btn" id="sendBtn"><i class="fas fa-paper-plane"></i></button>
                    </div>
                    <div class="disclaimer">
                        BhaiGPT may produce inaccurate information. Your data is used to train our models. Please do not share sensitive information. <br> By using this service, you agree to our terms and conditions.
                    </div>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // --- DOM References & Initial State ---
                const historyList = document.getElementById('historyList');          // Sidebar list of chats
                const welcomeScreen = document.getElementById('welcomeScreen');      // Welcome prompt container
                const messageInput = document.getElementById('messageInput');        // Textarea for user input
                const sendBtn = document.getElementById('sendBtn');                  // Send button
                const modeBtns = document.querySelectorAll('.mode-btn');             // Controls for selecting mode (text/image/video/voice)
                const chatMessages = document.getElementById('chatMessages');        // Container for chat message bubbles
        
                let currentChatId = null;    // Tracks which chat session is active
                let isGenerating = false;     // Prevents duplicate requests while generating
                let currentMode = 'text';     // Tracks currently selected mode
        
                // --- Helper: Update Input Placeholder Based on Mode ---
                function updatePlaceholder() {
                    switch (currentMode) {
                        case 'text':
                            messageInput.placeholder = 'Type your message here...';
                            break;
                        case 'image':
                            messageInput.placeholder = 'Describe the image you want to generate...';
                            break;
                        case 'video':
                            messageInput.placeholder = 'Describe the video you want to generate...';
                            break;
                        case 'voice':
                            messageInput.placeholder = 'Enter the text to convert into speech...';
                            break;
                    }
                }
        
                // --- UI State Toggles for Loading & Errors ---
                function showLoadingState() {
                    sendBtn.classList.add('loading');
                    // You can also show a spinner here
                }
        
                function removeLoadingState() {
                    sendBtn.classList.remove('loading');
                }
        
                function showError(message) {
                    alert(`Error: ${message}`);
                }
        
                // --- Mode Selection Handler ---
                modeBtns.forEach(btn => {
                    btn.addEventListener('click', function () {
                        // Toggle active class on buttons
                        modeBtns.forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
        
                        // Update mode & placeholder
                        currentMode = this.dataset.mode;
                        updatePlaceholder();
        
                        // Show or hide model selector (only for text mode)
                        const modelSelector = document.querySelector('.model-selector');
                        modelSelector.style.display = (currentMode === 'text') ? 'block' : 'none';
                    });
                });
        
                // --- Load & Render Chat Sessions ---
                async function loadChatSessions() {
                    try {
                        const response = await fetch('/chats');
                        const data = await response.json();
                        renderChatList(data.chats);
                    } catch (err) {
                        console.error('Failed to load chats:', err);
                    }
                }
        
                function renderChatList(chats) {
                    historyList.innerHTML = chats.map(chat => `
                        <li class="history-item" data-chat-id="${chat._id}">
                            <i class="fas fa-comment"></i>
                            <span>${chat.title}</span>
                            <button class="delete-chat" onclick="deleteChat('${chat._id}')">&times;</button>
                        </li>
                    `).join('');
        
                    // Attach click events
                    document.querySelectorAll('.history-item').forEach(item => {
                        item.addEventListener('click', async () => {
                            currentChatId = item.dataset.chatId;
                            await loadChatMessages(currentChatId);
                            document.querySelectorAll('.history-item').forEach(i => i.classList.remove('active'));
                            item.classList.add('active');
                        });
                    });
                }
        
                // --- Load Messages for a Chat ---
                async function loadChatMessages(chatId) {
                    try {
                        const response = await fetch(`/chats/${chatId}`);
                        const { messages, title } = await response.json();
                        renderMessages(messages);
                        welcomeScreen.style.display = 'none';
                    } catch (err) {
                        console.error('Failed to load messages:', err);
                    }
                }
        
                // --- Create a New Chat Session ---
                async function createNewChat() {
                    try {
                        const model = document.getElementById('modelSelect').value;
                        const response = await fetch('/chats', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ title: `New Chat (${model})`, modelUsed: model })
                        });
                        const newChat = await response.json();
                        currentChatId = newChat.id;
                        await loadChatSessions();
                        welcomeScreen.style.display = 'none';
                    } catch (err) {
                        console.error('Failed to create chat:', err);
                    }
                }
        
                // --- Main Send Message Handler (Supports All Modes) ---
                async function sendMessage() {
                    if (isGenerating) return;
                    const content = messageInput.value.trim();
                    if (!content) return;
        
                    try {
                        isGenerating = true;
                        sendBtn.disabled = true;
                        showLoadingState();
        
                        // Ensure a chat session exists
                        if (!currentChatId) await createNewChat();
        
                        // Save user message
                        await addMessageToServer({ role: 'user', content, mode: currentMode, input: content });
        
                        // Generate AI response based on mode
                        let response;
                        switch (currentMode) {
                            case 'text':  response = await generateTextResponse(content);  break;
                            case 'image': response = await generateImageResponse(content); break;
                            case 'video': response = await generateVideoResponse(content); break;
                            case 'voice': response = await generateVoiceResponse(content); break;
                            default: throw new Error('Invalid mode');
                        }
        
                        // Save AI response
                        await addMessageToServer({ role: 'assistant', content: response, mode: currentMode });
        
                        // Reset input
                        messageInput.value = '';
                        messageInput.style.height = 'auto';
                    } catch (err) {
                        showError(err.message);
                    } finally {
                        isGenerating = false;
                        sendBtn.disabled = false;
                        removeLoadingState();
                    }
                }
        
                // --- Persist Message & Re-render ---
                async function addMessageToServer(message) {
                    const response = await fetch(`/chats/${currentChatId}/messages`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(message)
                    });
                    const { messages } = await response.json();
                    renderMessages(messages);
                }
        
                // --- Generation Handlers for Each Mode ---
                async function generateTextResponse(prompt) {
                    const res = await fetch('/api/generate/text', {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ prompt, model: document.getElementById('modelSelect').value })
                    });
                    const data = await res.json();
                    return data.text;
                }
        
                async function generateImageResponse(description) {
                    const res = await fetch('/api/generate/image', {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ description, size: '1024x1024' })
                    });
                    const data = await res.json();
                    return data.image_url;
                }
        
                async function generateVideoResponse(description) {
                    const res = await fetch('/api/generate/video', {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ description, duration: 30 })
                    });
                    const data = await res.json();
                    return data.video_url;
                }
        
                async function generateVoiceResponse(text) {
                    const res = await fetch('/api/generate/voice', {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ text, voice: 'nova' })
                    });
                    const data = await res.json();
                    return data.audio_url;
                }
        
                // --- Render Chat Messages in UI ---
                function renderMessages(messages) {
                    chatMessages.innerHTML = messages.map(msg => `
                        <div class="message ${msg.role}">
                            <div class="message-avatar">
                                ${msg.role === 'user' ? '<i class="fas fa-user"></i>' : '<img src="/images/WhiteLogo.png" alt="BhaiGPT" class="bot-avatar">'}
                            </div>
                            <div class="message-content">
                                ${msg.mode === 'image'   ? `<img src="${msg.content}" class="generated-image" alt="Generated image">`  :
                                 msg.mode === 'video'   ? `<video controls src="${msg.content}" class="generated-video"></video>` :
                                 msg.mode === 'voice'   ? `<audio controls src="${msg.content}"></audio>`                   :
                                                            msg.content}
                                <div class="message-meta">
                                    <span class="mode-tag">${msg.mode}</span>
                                    <span class="message-timestamp">${new Date(msg.timestamp).toLocaleTimeString()}</span>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    scrollToBottom();
                }
        
                // --- Scroll Chat to Bottom ---
                function scrollToBottom() {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
        
                // --- Delete Chat Session Handler ---
                async function deleteChat(chatId) {
                    if (confirm('Are you sure you want to delete this chat?')) {
                        await fetch(`/chats/${chatId}`, { method: 'DELETE' });
                        if (currentChatId === chatId) {
                            currentChatId = null;
                            welcomeScreen.style.display = 'flex';
                            chatMessages.innerHTML = '';
                        }
                        await loadChatSessions();
                    }
                }
        
                // --- Initialize on Load ---
                loadChatSessions();
            });
        </script>
        
    </body>